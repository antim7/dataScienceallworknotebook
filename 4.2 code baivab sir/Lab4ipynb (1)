{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNCf5TTQdL/GGuhANP3QcqV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1mOc_y_ZsSHk","executionInfo":{"status":"ok","timestamp":1679855528971,"user_tz":-360,"elapsed":26682,"user":{"displayName":"Shawan Das","userId":"12697085418713095865"}},"outputId":"dab47b9a-f14a-453f-d03c-1f8b2ea4e252"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["input_grammar= '/content/drive/MyDrive/4-2_Semester/CSE 430 Lab/Lab4/input.txt'\n","input_grammar =open(input_grammar, 'r')\n","input_grammar= input_grammar.read()"],"metadata":{"id":"hyHDLNLCNu6b","executionInfo":{"status":"ok","timestamp":1679855909575,"user_tz":-360,"elapsed":2,"user":{"displayName":"Shawan Das","userId":"12697085418713095865"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["def eliminate_left_recursion(grammar, productions, non_terminals):\n","    text = non_terminals[0]\n","\n","    alpha_prod = []\n","    beta_prod = []\n","\n","    for production in productions:\n","        if production[0] == text:\n","            alpha_prod.append(production[1:])\n","        else:\n","            beta_prod.append(production)\n","\n","    textP = text + \"'\"\n","\n","    grammar[text] = [beta + textP for beta in beta_prod]\n","    grammar[textP] = [alpha + textP for alpha in alpha_prod] + ['empty']\n","\n","    return grammar"],"metadata":{"id":"2KvuCco4wiBh","executionInfo":{"status":"ok","timestamp":1679855913025,"user_tz":-360,"elapsed":2,"user":{"displayName":"Shawan Das","userId":"12697085418713095865"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["ig = input_grammar \n","non_terminals = [input_grammar[0]]\n","for i in range(len(ig)):  # ig -> main text\n","  if input_grammar[i].isupper() and input_grammar[i] not in non_terminals:\n","      non_terminals.append(input_grammar[i])\n","for i in range(len(ig)):  # ig -> main text\n","  if input_grammar[i] == '>':\n","      productions = input_grammar[i+1:]\n","\n","productions = productions.split('|')\n","\n","grammar = {\n","  non_terminals[0]: productions\n","}\n","\n","output = eliminate_left_recursion(grammar, productions, non_terminals)\n","\n","for key, value in output.items():\n","  print(f\"{key} -> \", end='')\n","  for i in range(len(value)):\n","      if i == 0:\n","          print(value[i], end='')\n","      else:\n","          print(f\"| {value[i]}\", end='')\n","  print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8YO19TPwKluN","executionInfo":{"status":"ok","timestamp":1679855915600,"user_tz":-360,"elapsed":414,"user":{"displayName":"Shawan Das","userId":"12697085418713095865"}},"outputId":"79003773-3b18-4c67-af08-0d8b0a8d1f0c"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["E -> TE'\n","E' -> +TE'| empty\n"]}]}]}